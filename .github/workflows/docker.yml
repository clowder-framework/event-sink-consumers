name: Docker

# This will run when:
# - a new release is created, to make sure the right tags of the
#   docker images are pushed (expects tags to be v1.8.4).
# - when new code is pushed to main/develop to push the tags
#   latest and develop
# - when a pull request is created and updated  to make sure the
#   Dockerfile is still valid.
# To be able to push to dockerhub, this execpts the following
# secrets to be set in the project:
# - DOCKERHUB_USERNAME : username that can push to the org
# - DOCKERHUB_PASSWORD : password asscoaited with the username
on:
  push:
    branches:
      - main

  pull_request:

# Certain actions will only run when this is the main repo.
env:
  MASTER_REPO: clowder-framework/event-sink-consumers
  DOCKERHUB_ORG: clowder

jobs:
  docker:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        name:
          - echo
          - mongodb
          - influxdb
          - amplitude
          - google-analytics
        include:
          - name: echo
            FOLDER: consumers/echo
          - name: mongodb
            FOLDER: consumers/mongodb
          - name: influxdb
            FOLDER: consumers/influxdb
          - name: amplitude
            FOLDER: consumers/amplitude
          - name: google-analytics
            FOLDER: consumers/google-analytics-4

    steps:
      - uses: actions/checkout@v2

      - name: get release info
        id: release_info
        run: |
          version="$(awk '/^## / { print $2} ' CHANGELOG.md | head -1)"
          changelog="$(sed -e "1,/^## ${version}/d" -e "/^## /,\$d" -e '/^$/d' CHANGELOG.md)"
          changelog="${changelog//'%'/'%25'}"
          changelog="${changelog//$'\n'/'%0A'}"
          changelog="${changelog//$'\r'/'%0D'}"
          echo "::set-output name=version::$version"
          echo "::set-output name=changelog::$changelog"
          tags="latest"
          oldversion=""
          while [ "${oldversion}" != "${version}" ]; do
            oldversion="${version}"
            tags="${tags},${version}"
            version=${version%.*}
          done
          echo "::set-output name=tags::$tags"

      # build the docker image, this will always run to make sure
      # the Dockerfile still works.
      - name: Build image
        uses: elgohr/Publish-Docker-Github-Action@2.22
        env:
          VERSION: ${{ steps.release_info.outputs.version }}
          BUILDNUMBER: ${{ github.run_number }}
          GITSHA1: ${{ github.sha  }}
        with:
          registry: docker.pkg.github.com
          name: ${{ github.repository_owner }}/${{ github.event.repository.name }}/eventsink-${{ matrix.NAME }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          context: ${{ matrix.FOLDER }}
          tags: "${{ steps.release_info.outputs.tags }}"
          buildargs: VERSION,BUILDNUMBER,GITSHA1
          no_push: true

      # this will publish to github container registry
      - name: Publish to GitHub
        if: github.event_name == 'push' && github.repository == env.MASTER_REPO
        uses: elgohr/Publish-Docker-Github-Action@2.22
        env:
          VERSION: ${{ steps.release_info.outputs.version }}
          BUILDNUMBER: ${{ github.run_number }}
          GITSHA1: ${{ github.sha  }}
        with:
          registry: ghcr.io
          name: ${{ github.repository_owner }}/eventsink-${{ matrix.NAME }}
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_PASSWORD }}
          context: ${{ matrix.FOLDER }}
          tags: "${{ steps.release_info.outputs.tags }}"
          buildargs: VERSION,BUILDNUMBER,GITSHA1

      # this will publish to the clowder dockerhub repo
      - name: Publish to Docker Hub
        if: github.event_name == 'push' && github.repository == env.MASTER_REPO
        uses: elgohr/Publish-Docker-Github-Action@2.22
        env:
          VERSION: ${{ steps.release_info.outputs.version }}
          BUILDNUMBER: ${{ github.run_number }}
          GITSHA1: ${{ github.sha  }}
        with:
          name: ${{ env.DOCKERHUB_ORG }}/eventsink-${{ matrix.NAME }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          context: ${{ matrix.FOLDER }}
          tags: "${{ steps.release_info.outputs.tags }}"
          buildargs: VERSION,BUILDNUMBER,GITSHA1

      # this will update the README of the dockerhub repo
      - name: check file
        id: filecheck
        if: github.event_name != 'push' && github.repository == env.MASTER_REPO
        run: |
          if [ "${{ matrix.README }}" != "" -a -e "${{ matrix.README }}" ]; then
            echo "##[set-output name=exists;]true"
          else
            echo "##[set-output name=exists;]false"
          fi
      - name: Docker Hub Description
        if: github.event_name != 'push' && github.repository == env.MASTER_REPO && steps.filecheck.outputs.exists == 'true'
        uses: peter-evans/dockerhub-description@v2
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
          DOCKERHUB_REPOSITORY: ${{ env.DOCKERHUB_ORG }}/eventsink-${{ matrix.NAME }}
          README_FILEPATH: ${{ matrix.README }}

      # mark the release on github
      - name: create release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.release_info.outputs.version }}
          release_name: Release ${{ steps.release_info.outputs.version }}
          body: ${{ steps.release_info.outputs.changelog }}

